---
name: tofu-cloudflare

# Use-cases:
# * Never label PR with more than two "tofu" labels because of concurrency: https://github.com/orgs/community/discussions/41518
# * When there is a new commit pushed to the branch with changes in `opentofu/cloudflare` directory - run `tofu plan`
# * When PR is merged with changes in `opentofu/cloudflare` directory - run `tofu apply`
# * When PR is labeled by `tofu-plan/apply/destroy` with changes in `opentofu/cloudflare` directory - run `tofu plan/apply/destroy`
# * When scheduled - run `tofu apply`
# * When manually called using workflow_dispatch - run `tofu plan/apply/destroy`

on:
  workflow_dispatch:
    inputs:
      tofu_command:
        description: tofu main command
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan
  push:
    # https://stackoverflow.com/questions/76037078/why-is-my-github-action-on-paths-also-triggered-when-pushing-a-new-tag
    branches:
      - "**"
    paths:
      - opentofu/cloudflare/**
  pull_request:
    types: [labeled]
    paths:
      - opentofu/cloudflare/**

permissions: read-all

env:
  # keep-sorted start
  AWS_ACCESS_KEY_ID: ${{ secrets.CLOUDFLARE_R2_STORAGE_AWS_ACCESS_KEY_ID }}
  AWS_REGION: eu-central-1
  AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }}
  AWS_S3_ENDPOINT: ${{ secrets.CLOUDFLARE_R2_STORAGE_AWS_ENDPOINT_URL_S3 }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.CLOUDFLARE_R2_STORAGE_AWS_SECRET_ACCESS_KEY }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  TF_CLI_ARGS_apply: "-auto-approve"
  TF_CLI_ARGS_destroy: "-auto-approve"
  TF_CLI_ARGS_plan: "-lock=false"
  TF_INPUT: "false"
  TF_IN_AUTOMATION: "true"
  TF_VAR_cloudflare_account_id: ${{ secrets.TF_VAR_CLOUDFLARE_ACCOUNT_ID }}
  TF_VAR_cloudflare_zero_trust_access_identity_provider_google_oauth_client_id: ${{ secrets.TF_VAR_CLOUDFLARE_ZERO_TRUST_ACCESS_IDENTITY_PROVIDER_GOOGLE_OAUTH_CLIENT_ID }}
  TF_VAR_cloudflare_zero_trust_access_identity_provider_google_oauth_client_secret: ${{ secrets.TF_VAR_CLOUDFLARE_ZERO_TRUST_ACCESS_IDENTITY_PROVIDER_GOOGLE_OAUTH_CLIENT_SECRET }}
  TF_VAR_cloudflare_zero_trust_tunnel_cloudflared_tunnel_secret: ${{ secrets.TF_VAR_CLOUDFLARE_ZERO_TRUST_TUNNEL_CLOUDFLARED_TUNNEL_SECRET }}
  TF_VAR_opentofu_encryption_passphrase: ${{ secrets.TF_VAR_OPENTOFU_ENCRYPTION_PASSPHRASE }}
  TOFU_WORKING_DIRECTORY: opentofu/cloudflare
  # keep-sorted end

# Use concurrency to prevent running tofu-cloudflare simultaneously
concurrency:
  group: tofu-cloudflare

defaults:
  run:
    shell: bash -euxo pipefail {0}

jobs:
  tofu-cloudflare:
    # If the action is triggered by a pull request event then run it only for labels `tofu-plan/apply/destroy`
    runs-on: ubuntu-latest
    permissions:
      actions: read # Required to identify workflow run
      contents: read # Required to checkout repository
      # kics-scan ignore-line
      id-token: write # Required to identify workflow run
      pull-requests: write # Required to add comment and label

    steps:
      - name: Debug
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: |
          echo "${GITHUB_CONTEXT}"
          env

      - name: Set variables
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          PR_LABEL: ${{ github.event.label.name }}
          INPUTS_TOFU_COMMAND: ${{ inputs.tofu_command }}
          GITHUB_EVENT_REPOSITORY_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
        run: |
          # If inputs.tofu_command form workflow_dispatch is set - use it as tofu_command
          if [[ -z "${INPUTS_TOFU_COMMAND}" ]]; then

            if [[ "${GITHUB_EVENT_NAME}" = "push" ]]; then
              echo "TOFU_COMMAND=plan" | tee -a "${GITHUB_ENV}"
            fi

            # Run after PR is merged
            if [[ ( "${GITHUB_EVENT_NAME}" = "push" || "${GITHUB_EVENT_NAME}" = "schedule" ) && "${GITHUB_REF_NAME}" = "${GITHUB_EVENT_REPOSITORY_DEFAULT_BRANCH}" ]]; then
              echo "TOFU_COMMAND=apply" | tee -a "${GITHUB_ENV}"
            fi

            case "${PR_LABEL}" in
              tofu-apply)
                echo "*** tofu-apply"
                echo "TOFU_COMMAND=apply" | tee -a "${GITHUB_ENV}"
                ;;
              # Disable destroy
              # tofu-destroy)
              #   echo "*** tofu-destroy"
              #   echo "TOFU_COMMAND=destroy" | tee -a "${GITHUB_ENV}"
              #   ;;
              tofu-plan)
                echo "*** tofu-plan"
                echo "TOFU_COMMAND=plan" | tee -a "${GITHUB_ENV}"
                ;;
            esac
          else
            echo "TOFU_COMMAND=${INPUTS_TOFU_COMMAND}" | tee -a "${GITHUB_ENV}"
          fi

      - name: Setup OpenTofu
        if: ${{ env.TOFU_COMMAND != '' }}
        uses: opentofu/setup-opentofu@592200bd4b9bbf4772ace78f887668b1aee8f716 # v1.0.5

      - name: Checkout repository
        if: ${{ env.TOFU_COMMAND != '' }}
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: ðŸ’¡ Run tofu "${{ env.TOFU_COMMAND }}"
        if: ${{ env.TOFU_COMMAND != '' }}
        env:
          TOFU_COMMAND: ${{ env.TOFU_COMMAND }}
          TOFU_WORKING_DIRECTORY: ${{ env.TOFU_WORKING_DIRECTORY }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_OPENTOFU_GITHUB_REPOSITORIES }}
        run: |
          set -euxo pipefail
          eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
          brew install tfcmt
          tofu -chdir="${TOFU_WORKING_DIRECTORY}" init
          tfcmt "${TOFU_COMMAND}" -- tofu -chdir="${TOFU_WORKING_DIRECTORY}" "${TOFU_COMMAND}"

      - name: Remove label
        if: ${{ github.event.label.name != '' && env.TOFU_COMMAND != '' }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number }}
          PR_LABEL: ${{ github.event.label.name }}
        run: gh api "/repos/{owner}/{repo}/issues/${PR_NUMBER}/labels/${PR_LABEL}" --method DELETE
